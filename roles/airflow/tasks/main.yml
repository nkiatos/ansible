#########################################
#  Copy files
##########################################
# Copy constraints file
- name: Copy constraints file
  copy:
    src: files/constraints-3.8.txt
    dest: /tmp
    mode: 0666

# Copy Airflow scheduler service
- name: Copy Airflow scheduler service
  copy:
    src: files/airflow-scheduler.service
    dest: /usr/lib/systemd/system
    mode: 0644

# Copy Airflow webserver service
- name: Copy Airflow webserver service
  copy:
    src: files/airflow-webserver.service
    dest: /usr/lib/systemd/system
    mode: 0644

# Copy Airflow conf file
- name: Copy Airflow conf file
  copy:
    src: files/airflow.conf
    dest: /usr/lib/tmpfiles.d
    mode: 0644            

# Copy Airflow file
- name: Copy Airflow file
  copy:
    src: files/airflow
    dest: /etc/sysconfig
    mode: 0644  

#########################################
#  Airflow config
##########################################

# Create Airflow user
# - name: Create the Airflow user and Airflow home
#   become: yes
#   shell: |
#     #!bin/bash
#     useradd airflow
#     # mkdir /opt/airflow
#     # chown -R airflow:airflow /opt/airflow

# Create Airflow user
- name: Create the Airflow user
  user:
    name: airflow
    create_home: true

- name: Creates airflow_home directory if doesn't exists
  file:
    path: /opt/airflow
    state: directory
    owner: airflow
    group: airflow
    mode: 0777

# Copy airflow.cfg file
- name: Copy airflow.cfg file
  copy:
    src: files/airflow.cfg
    dest: /tmp
    owner: airflow
    group: airflow
    mode: 0644

# Copy webserver_config.py file
- name: Copy webserver_config file
  copy:
    src: files/webserver_config.py
    dest: /tmp
    owner: airflow
    group: airflow    
    mode: 0664

# Copy Airflow config files to Airflow home
# - name: Copy files to Airflow home
#   become: yes
#   shell: |
#     #!bin/bash
#     mv /tmp/airflow.cfg /opt/airflow
#     mv /tmp/webserver_config.py /opt/airflow
#     chown -R airflow:airflow /opt/airflow



- name: Checks if post package installation has been done
  stat:
    path: "/etc/profile.d/airflow.sh"
  register: airflow_home_result

- debug:
    msg: "The file /etc/profile.d/airflow.sh, skipping next step"
  when: airflow_home_result.stat.exists
    
- name: Post package installation requirements
  become: yes
  shell: |
    #!bin/bash
    bash -c 'echo "export AIRFLOW_HOME=/opt/airflow" >> /etc/profile.d/airflow.sh'
    source /etc/profile
    # needs to be root
  when: not airflow_home_result.stat.exists

- name: Checks if Airflow installation has been done
  stat:
    path: "/home/airflow/.local/bin/airflow"
  register: airflow_result

- debug:
    msg: "The file /home/airflow/.local/bin/airflow exists, skipping next step"
  when: airflow_result.stat.exists

#Install Airflow as the airflow user
# - name: Install Airflow as airflow user
#   become: yes
#   become_user: airflow
#   shell: |
#     #!bin/bash
#     source /etc/profile    
#     CONSTRAINT_URL="/tmp/constraints-3.8.txt"
#     export AIRFLOW_HOME=/opt/airflow
#     pip install apache-airflow['postgresql'] --constraint "${CONSTRAINT_URL}" --user
#     #echo export PATH=$PATH:/home/airflow/.local/bin >> ~/.bashrc
#     bash -c 'echo "export PATH=$PATH:/home/airflow/.local/bin" >> ~/.bashrc'
#     source ~/.bashrc
#   when: not airflow_result.stat.exists

- name: Install Airflow under airflow user account
  become: yes
  become_user: airflow  
  pip:
    name: apache-airflow
    executable: pip3
    extra_args: "--constraint /tmp/constraints-3.8.txt --user"
    state: present

- name: Install Airflow postgres provider
  become: yes
  become_user: airflow  
  pip:
    name: apache-airflow-providers-postgres
    executable: pip3
    extra_args: "--user"
    state: present

- name: Remove default Airflow sqlite provider
  become: yes
  become_user: airflow
  pip:
    name: apache-airflow-providers-sqlite
    executable: pip3
    # extra_args: "--user"
    state: absent

- name: Creates airflow_home directory if doesn't exists
  file:
    path: /run/airflow
    state: directory
    owner: airflow
    group: airflow
    mode: 0755

# Enable Airflow webserver service
- name: Enable Airflow webserver service
  service:
    name: airflow-webserver
    enabled: yes

# Enable Airflow schedular service
- name: Enable Airflow scheduler service
  service:
    name: airflow-scheduler
    enabled: yes

# # Configure Airflow
# - name: Configure Airflow
#   become: yes
#   shell: |
#     #!bin/bash
#     # Enable airflow service
#     systemctl enable airflow-scheduler
#     systemctl enable airflow-webserver

- name: Check if kubectl exists
  stat:
    path: "/home/airflow/.local/bin/kubectl"
  register: kubectl_result

- debug:
    msg: "The file /home/airflow/.local/bin/kubectl exists, skipping install step"
  when: kubectl_result.stat.exists

# Install Kubectl
- name: Install Kubectl to be run by the airflow user
  become: yes
  become_user: airflow
  shell: |
    #!bin/bash
    cd ~
    curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/kubectl
    #wget https://artifactory.ctz.atocnet.gov.au:443/artifactory/sdp-aapiac-generic-develop-local/kubernetes/kubectl-1.21
    chmod +x ./kubectl
    mv ./kubectl /home/airflow/.local/bin/kubectl
    #kubectl version --short --client
  when: not kubectl_result.stat.exists

